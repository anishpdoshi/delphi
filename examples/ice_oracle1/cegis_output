Variable IDx
Variable IDy
Pref_ffunction_application
  * type: bool
  0: symbol
      * type: mathematical_function
          0: 
            0: integer
            1: integer
          1: bool
      * identifier: pre-f
  1: tuple
      * type: 
      0: symbol
          * type: integer
          * identifier: x
      1: symbol
          * type: integer
          * identifier: y
Variable IDx
Variable IDy
Variable IDx!
Variable IDy!
Variable IDx
Variable IDy
Variable IDx!
Variable IDy!
Variable IDx
Variable IDy
Expanding (=> (pre-f x y) (inv-f x y))
Expanding (pre-f x y)
Expanding pre-f
Expanding (tuple)
Expanding x
Expanding y
Expanding (and (> y 0) (= x 0))
Expanding (> y 0)
Expanding y
Expanding 0
Expanding (= x 0)
Expanding x
Expanding 0
Expanding (inv-f x y)
Expanding inv-f
Expanding (tuple)
Expanding x
Expanding y
Expanding (=> (and (inv-f x y) (trans-f x y x! y!)) (inv-f x! y!))
Expanding (and (inv-f x y) (trans-f x y x! y!))
Expanding (inv-f x y)
Expanding inv-f
Expanding (tuple)
Expanding x
Expanding y
Expanding (trans-f x y x! y!)
Expanding trans-f
Expanding (tuple)
Expanding x
Expanding y
Expanding x!
Expanding y!
Expanding (or (and (>= x y) (and (= x! x) (= y! y))) (and (< x y) (and (= x! (+ x 1)) (= y! y))))
Expanding (and (>= x y) (and (= x! x) (= y! y)))
Expanding (>= x y)
Expanding x
Expanding y
Expanding (and (= x! x) (= y! y))
Expanding (= x! x)
Expanding x!
Expanding x
Expanding (= y! y)
Expanding y!
Expanding y
Expanding (and (< x y) (and (= x! (+ x 1)) (= y! y)))
Expanding (< x y)
Expanding x
Expanding y
Expanding (and (= x! (+ x 1)) (= y! y))
Expanding (= x! (+ x 1))
Expanding x!
Expanding (+ x 1)
Expanding x
Expanding 1
Expanding (= y! y)
Expanding y!
Expanding y
Expanding (inv-f x! y!)
Expanding inv-f
Expanding (tuple)
Expanding x!
Expanding y!
Expanding (=> (inv-f x y) (post-f x y))
Expanding (inv-f x y)
Expanding inv-f
Expanding (tuple)
Expanding x
Expanding y
Expanding (post-f x y)
Expanding post-f
Expanding (tuple)
Expanding x
Expanding y
Expanding (=> (>= x y) (= x y))
Expanding (>= x y)
Expanding x
Expanding y
Expanding (= x y)
Expanding x
Expanding y
Start OGIS
SYNTH iteration 1
Solving query:
(set-logic ALL)
(synth-fun inv-f (( parameter0 Int)( parameter1 Int))
 Bool
(( NTbool Bool)(NTnonbool Int))
((NTbool Bool((and NTbool NTbool)(or NTbool NTbool)(not NTbool)(= NTnonbool NTnonbool)(>= NTnonbool NTnonbool)(> NTnonbool NTnonbool)))
(NTnonbool Int(parameter0 parameter1 0 1 2 3 (Constant Int)(+ NTnonbool NTnonbool)(- NTnonbool NTnonbool)(- NTnonbool)(ite NTbool NTnonbool NTnonbool)))

)
)

(check-synth)

Got solution inv-f -> 0 == 0
VERIFY iteration 1
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |y| () Int)
; find_symbols
(declare-fun |x| () Int)
; find_symbols
(declare-fun |x!| () Int)
; find_symbols
(declare-fun |y!| () Int)
; set_to false
(assert (not (and (=> (and (> |y| 0) (= |x| 0)) (= 0 0)) (=> (and (= 0 0) (or (and (>= |x| |y|) (and (= |x!| |x|) (= |y!| |y|))) (and (< |x| |y|) (and (= |x!| (+ |x| 1)) (= |y!| |y|))))) (= 0 0)) (=> (= 0 0) (=> (>= |x| |y|) (= |x| |y|))))))
Synthesis constraint (=> (and (> 0 0) (= 1 0)) (inv-f 1 0))
Synthesis constraint (=> (and (inv-f 1 0) (or (and (>= 1 0) (and (= 0 1) (= 0 0))) (and (< 1 0) (and (= 0 (+ 1 1)) (= 0 0))))) (inv-f 0 0))
Synthesis constraint (=> (inv-f 1 0) (=> (>= 1 0) (= 1 0)))
getting assumptions 
Fail: got 3 new constraints
SYNTH iteration 2
Solving query:
(set-logic ALL)
(synth-fun inv-f (( parameter0 Int)( parameter1 Int))
 Bool
(( NTbool Bool)(NTnonbool Int))
((NTbool Bool((and NTbool NTbool)(or NTbool NTbool)(not NTbool)(= NTnonbool NTnonbool)(>= NTnonbool NTnonbool)(> NTnonbool NTnonbool)))
(NTnonbool Int(parameter0 parameter1 0 1 2 3 (Constant Int)(+ NTnonbool NTnonbool)(- NTnonbool NTnonbool)(- NTnonbool)(ite NTbool NTnonbool NTnonbool)))

)
)

(constraint (=> (and (> 0 0) (= 1 0)) (inv-f 1 0)))
(constraint (=> (and (inv-f 1 0) (or (and (>= 1 0) (and (= 0 1) (= 0 0))) (and (< 1 0) (and (= 0 (+ 1 1)) (= 0 0))))) (inv-f 0 0)))
(constraint (=> (inv-f 1 0) (=> (>= 1 0) (= 1 0))))
(check-synth)

Got solution inv-f -> 0 == -1
VERIFY iteration 2
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |y| () Int)
; find_symbols
(declare-fun |x| () Int)
; find_symbols
(declare-fun |x!| () Int)
; find_symbols
(declare-fun |y!| () Int)
; set_to false
(assert (not (and (=> (and (> |y| 0) (= |x| 0)) (= 0 (- 1))) (=> (and (= 0 (- 1)) (or (and (>= |x| |y|) (and (= |x!| |x|) (= |y!| |y|))) (and (< |x| |y|) (and (= |x!| (+ |x| 1)) (= |y!| |y|))))) (= 0 (- 1))) (=> (= 0 (- 1)) (=> (>= |x| |y|) (= |x| |y|))))))
Synthesis constraint (=> (and (> 1 0) (= 0 0)) (inv-f 0 1))
Synthesis constraint (=> (and (inv-f 0 1) (or (and (>= 0 1) (and (= 0 0) (= 0 1))) (and (< 0 1) (and (= 0 (+ 0 1)) (= 0 1))))) (inv-f 0 0))
Synthesis constraint (=> (inv-f 0 1) (=> (>= 0 1) (= 0 1)))
getting assumptions 
Fail: got 3 new constraints
SYNTH iteration 3
Solving query:
(set-logic ALL)
(synth-fun inv-f (( parameter0 Int)( parameter1 Int))
 Bool
(( NTbool Bool)(NTnonbool Int))
((NTbool Bool((and NTbool NTbool)(or NTbool NTbool)(not NTbool)(= NTnonbool NTnonbool)(>= NTnonbool NTnonbool)(> NTnonbool NTnonbool)))
(NTnonbool Int(parameter0 parameter1 0 1 2 3 (Constant Int)(+ NTnonbool NTnonbool)(- NTnonbool NTnonbool)(- NTnonbool)(ite NTbool NTnonbool NTnonbool)))

)
)

(constraint (=> (and (> 0 0) (= 1 0)) (inv-f 1 0)))
(constraint (=> (and (> 1 0) (= 0 0)) (inv-f 0 1)))
(constraint (=> (and (inv-f 0 1) (or (and (>= 0 1) (and (= 0 0) (= 0 1))) (and (< 0 1) (and (= 0 (+ 0 1)) (= 0 1))))) (inv-f 0 0)))
(constraint (=> (and (inv-f 1 0) (or (and (>= 1 0) (and (= 0 1) (= 0 0))) (and (< 1 0) (and (= 0 (+ 1 1)) (= 0 0))))) (inv-f 0 0)))
(constraint (=> (inv-f 0 1) (=> (>= 0 1) (= 0 1))))
(constraint (=> (inv-f 1 0) (=> (>= 1 0) (= 1 0))))
(check-synth)

Got solution inv-f -> parameter0 == 0
VERIFY iteration 3
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |y| () Int)
; find_symbols
(declare-fun |x| () Int)
; find_symbols
(declare-fun |x!| () Int)
; find_symbols
(declare-fun |y!| () Int)
; set_to false
(assert (not (and (=> (and (> |y| 0) (= |x| 0)) (= |x| 0)) (=> (and (= |x| 0) (or (and (>= |x| |y|) (and (= |x!| |x|) (= |y!| |y|))) (and (< |x| |y|) (and (= |x!| (+ |x| 1)) (= |y!| |y|))))) (= |x!| 0)) (=> (= |x| 0) (=> (>= |x| |y|) (= |x| |y|))))))
Synthesis constraint (=> (and (> (- 1) 0) (= 0 0)) (inv-f 0 (- 1)))
Synthesis constraint (=> (and (inv-f 0 (- 1)) (or (and (>= 0 (- 1)) (and (= 1 0) (= (- 1) (- 1)))) (and (< 0 (- 1)) (and (= 1 (+ 0 1)) (= (- 1) (- 1)))))) (inv-f 1 (- 1)))
Synthesis constraint (=> (inv-f 0 (- 1)) (=> (>= 0 (- 1)) (= 0 (- 1))))
getting assumptions 
Fail: got 3 new constraints
SYNTH iteration 4
Solving query:
(set-logic ALL)
(synth-fun inv-f (( parameter0 Int)( parameter1 Int))
 Bool
(( NTbool Bool)(NTnonbool Int))
((NTbool Bool((and NTbool NTbool)(or NTbool NTbool)(not NTbool)(= NTnonbool NTnonbool)(>= NTnonbool NTnonbool)(> NTnonbool NTnonbool)))
(NTnonbool Int(parameter0 parameter1 0 1 2 3 (Constant Int)(+ NTnonbool NTnonbool)(- NTnonbool NTnonbool)(- NTnonbool)(ite NTbool NTnonbool NTnonbool)))

)
)

(constraint (=> (and (> (- 1) 0) (= 0 0)) (inv-f 0 (- 1))))
(constraint (=> (and (> 0 0) (= 1 0)) (inv-f 1 0)))
(constraint (=> (and (> 1 0) (= 0 0)) (inv-f 0 1)))
(constraint (=> (and (inv-f 0 (- 1)) (or (and (>= 0 (- 1)) (and (= 1 0) (= (- 1) (- 1)))) (and (< 0 (- 1)) (and (= 1 (+ 0 1)) (= (- 1) (- 1)))))) (inv-f 1 (- 1))))
(constraint (=> (and (inv-f 0 1) (or (and (>= 0 1) (and (= 0 0) (= 0 1))) (and (< 0 1) (and (= 0 (+ 0 1)) (= 0 1))))) (inv-f 0 0)))
(constraint (=> (and (inv-f 1 0) (or (and (>= 1 0) (and (= 0 1) (= 0 0))) (and (< 1 0) (and (= 0 (+ 1 1)) (= 0 0))))) (inv-f 0 0)))
(constraint (=> (inv-f 0 (- 1)) (=> (>= 0 (- 1)) (= 0 (- 1)))))
(constraint (=> (inv-f 0 1) (=> (>= 0 1) (= 0 1))))
(constraint (=> (inv-f 1 0) (=> (>= 1 0) (= 1 0))))
(check-synth)

Got solution inv-f -> parameter1 == 1
VERIFY iteration 4
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |y| () Int)
; find_symbols
(declare-fun |x| () Int)
; find_symbols
(declare-fun |x!| () Int)
; find_symbols
(declare-fun |y!| () Int)
; set_to false
(assert (not (and (=> (and (> |y| 0) (= |x| 0)) (= |y| 1)) (=> (and (= |y| 1) (or (and (>= |x| |y|) (and (= |x!| |x|) (= |y!| |y|))) (and (< |x| |y|) (and (= |x!| (+ |x| 1)) (= |y!| |y|))))) (= |y!| 1)) (=> (= |y| 1) (=> (>= |x| |y|) (= |x| |y|))))))
Synthesis constraint (=> (and (> 2 0) (= 0 0)) (inv-f 0 2))
Synthesis constraint (=> (and (inv-f 0 2) (or (and (>= 0 2) (and (= 0 0) (= 0 2))) (and (< 0 2) (and (= 0 (+ 0 1)) (= 0 2))))) (inv-f 0 0))
Synthesis constraint (=> (inv-f 0 2) (=> (>= 0 2) (= 0 2)))
getting assumptions 
Fail: got 3 new constraints
SYNTH iteration 5
Solving query:
(set-logic ALL)
(synth-fun inv-f (( parameter0 Int)( parameter1 Int))
 Bool
(( NTbool Bool)(NTnonbool Int))
((NTbool Bool((and NTbool NTbool)(or NTbool NTbool)(not NTbool)(= NTnonbool NTnonbool)(>= NTnonbool NTnonbool)(> NTnonbool NTnonbool)))
(NTnonbool Int(parameter0 parameter1 0 1 2 3 (Constant Int)(+ NTnonbool NTnonbool)(- NTnonbool NTnonbool)(- NTnonbool)(ite NTbool NTnonbool NTnonbool)))

)
)

(constraint (=> (and (> (- 1) 0) (= 0 0)) (inv-f 0 (- 1))))
(constraint (=> (and (> 0 0) (= 1 0)) (inv-f 1 0)))
(constraint (=> (and (> 1 0) (= 0 0)) (inv-f 0 1)))
(constraint (=> (and (> 2 0) (= 0 0)) (inv-f 0 2)))
(constraint (=> (and (inv-f 0 (- 1)) (or (and (>= 0 (- 1)) (and (= 1 0) (= (- 1) (- 1)))) (and (< 0 (- 1)) (and (= 1 (+ 0 1)) (= (- 1) (- 1)))))) (inv-f 1 (- 1))))
(constraint (=> (and (inv-f 0 1) (or (and (>= 0 1) (and (= 0 0) (= 0 1))) (and (< 0 1) (and (= 0 (+ 0 1)) (= 0 1))))) (inv-f 0 0)))
(constraint (=> (and (inv-f 0 2) (or (and (>= 0 2) (and (= 0 0) (= 0 2))) (and (< 0 2) (and (= 0 (+ 0 1)) (= 0 2))))) (inv-f 0 0)))
(constraint (=> (and (inv-f 1 0) (or (and (>= 1 0) (and (= 0 1) (= 0 0))) (and (< 1 0) (and (= 0 (+ 1 1)) (= 0 0))))) (inv-f 0 0)))
(constraint (=> (inv-f 0 (- 1)) (=> (>= 0 (- 1)) (= 0 (- 1)))))
(constraint (=> (inv-f 0 1) (=> (>= 0 1) (= 0 1))))
(constraint (=> (inv-f 0 2) (=> (>= 0 2) (= 0 2))))
(constraint (=> (inv-f 1 0) (=> (>= 1 0) (= 1 0))))
(check-synth)

Got solution inv-f -> parameter1 >= 1
VERIFY iteration 5
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |y| () Int)
; find_symbols
(declare-fun |x| () Int)
; find_symbols
(declare-fun |x!| () Int)
; find_symbols
(declare-fun |y!| () Int)
; set_to false
(assert (not (and (=> (and (> |y| 0) (= |x| 0)) (>= |y| 1)) (=> (and (>= |y| 1) (or (and (>= |x| |y|) (and (= |x!| |x|) (= |y!| |y|))) (and (< |x| |y|) (and (= |x!| (+ |x| 1)) (= |y!| |y|))))) (>= |y!| 1)) (=> (>= |y| 1) (=> (>= |x| |y|) (= |x| |y|))))))
Synthesis constraint (=> (and (> 1 0) (= 2 0)) (inv-f 2 1))
Synthesis constraint (=> (and (inv-f 2 1) (or (and (>= 2 1) (and (= 2 2) (= 0 1))) (and (< 2 1) (and (= 2 (+ 2 1)) (= 0 1))))) (inv-f 2 0))
Synthesis constraint (=> (inv-f 2 1) (=> (>= 2 1) (= 2 1)))
getting assumptions 
Fail: got 3 new constraints
SYNTH iteration 6
Solving query:
(set-logic ALL)
(synth-fun inv-f (( parameter0 Int)( parameter1 Int))
 Bool
(( NTbool Bool)(NTnonbool Int))
((NTbool Bool((and NTbool NTbool)(or NTbool NTbool)(not NTbool)(= NTnonbool NTnonbool)(>= NTnonbool NTnonbool)(> NTnonbool NTnonbool)))
(NTnonbool Int(parameter0 parameter1 0 1 2 3 (Constant Int)(+ NTnonbool NTnonbool)(- NTnonbool NTnonbool)(- NTnonbool)(ite NTbool NTnonbool NTnonbool)))

)
)

(constraint (=> (and (> (- 1) 0) (= 0 0)) (inv-f 0 (- 1))))
(constraint (=> (and (> 0 0) (= 1 0)) (inv-f 1 0)))
(constraint (=> (and (> 1 0) (= 0 0)) (inv-f 0 1)))
(constraint (=> (and (> 1 0) (= 2 0)) (inv-f 2 1)))
(constraint (=> (and (> 2 0) (= 0 0)) (inv-f 0 2)))
(constraint (=> (and (inv-f 0 (- 1)) (or (and (>= 0 (- 1)) (and (= 1 0) (= (- 1) (- 1)))) (and (< 0 (- 1)) (and (= 1 (+ 0 1)) (= (- 1) (- 1)))))) (inv-f 1 (- 1))))
(constraint (=> (and (inv-f 0 1) (or (and (>= 0 1) (and (= 0 0) (= 0 1))) (and (< 0 1) (and (= 0 (+ 0 1)) (= 0 1))))) (inv-f 0 0)))
(constraint (=> (and (inv-f 0 2) (or (and (>= 0 2) (and (= 0 0) (= 0 2))) (and (< 0 2) (and (= 0 (+ 0 1)) (= 0 2))))) (inv-f 0 0)))
(constraint (=> (and (inv-f 1 0) (or (and (>= 1 0) (and (= 0 1) (= 0 0))) (and (< 1 0) (and (= 0 (+ 1 1)) (= 0 0))))) (inv-f 0 0)))
(constraint (=> (and (inv-f 2 1) (or (and (>= 2 1) (and (= 2 2) (= 0 1))) (and (< 2 1) (and (= 2 (+ 2 1)) (= 0 1))))) (inv-f 2 0)))
(constraint (=> (inv-f 0 (- 1)) (=> (>= 0 (- 1)) (= 0 (- 1)))))
(constraint (=> (inv-f 0 1) (=> (>= 0 1) (= 0 1))))
(constraint (=> (inv-f 0 2) (=> (>= 0 2) (= 0 2))))
(constraint (=> (inv-f 1 0) (=> (>= 1 0) (= 1 0))))
(constraint (=> (inv-f 2 1) (=> (>= 2 1) (= 2 1))))
(check-synth)

Got solution inv-f -> parameter1 >= parameter0 + 0
VERIFY iteration 6
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |y| () Int)
; find_symbols
(declare-fun |x| () Int)
; find_symbols
(declare-fun |x!| () Int)
; find_symbols
(declare-fun |y!| () Int)
; set_to false
(assert (not (and (=> (and (> |y| 0) (= |x| 0)) (>= |y| (+ |x| 0))) (=> (and (>= |y| (+ |x| 0)) (or (and (>= |x| |y|) (and (= |x!| |x|) (= |y!| |y|))) (and (< |x| |y|) (and (= |x!| (+ |x| 1)) (= |y!| |y|))))) (>= |y!| (+ |x!| 0))) (=> (>= |y| (+ |x| 0)) (=> (>= |x| |y|) (= |x| |y|))))))
Verification passed
SOLUTION:
inv-f  =  (>= parameter1 (+ parameter0 0))
        0.80 real         0.66 user         0.09 sys
