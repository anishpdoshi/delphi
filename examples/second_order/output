Start OGIS
SYNTH iteration 1
Using  0 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
Got solution VERIFY iteration 1
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (my_constant (_ bv0 8) ) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (myoracle (my_constant (_ bv0 8)))
getting assumptions 
assumption: (= (myoracle (_ bv0 8)) false)
Fail: got 2 new constraints
SYNTH iteration 2
Using  2 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |myoracle$ce| ((_ BitVec 8) )Bool)
; set_to true
(assert (myoracle$ce |my_constant_inst0_result_0| ))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))

; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 1
VERIFY iteration 2
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (_ bv1 8) ))

; set_to false
(assert (not (and (bvult (_ bv1 8) (_ bv10 8)) (myoracle (_ bv1 8) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 1
Response stream false 

oracle response false
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (myoracle (my_constant (_ bv0 8)))
getting assumptions 
assumption: (= (myoracle (_ bv1 8)) false)
Fail: got 0 new constraints
SYNTH iteration 3
Using  2 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |myoracle$ce| ((_ BitVec 8) )Bool)
; set_to true
(assert (myoracle$ce |my_constant_inst0_result_0| ))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))

; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 8
VERIFY iteration 3
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (_ bv8 8) ))

; set_to true (equal)
(define-fun |H1| () Bool (myoracle (_ bv1 8) ))

; set_to true (equal)
(define-fun |H2| () Bool (myoracle (_ bv0 8) ))

; set_to false
(assert (not (=> (and (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false)) (and (bvult (_ bv8 8) (_ bv10 8)) (myoracle (_ bv8 8) )))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 1
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 8
Response stream false 

oracle response false
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (myoracle (my_constant (_ bv0 8)))
getting assumptions 
assumption: (= (myoracle (_ bv0 8)) false)
assumption: (= (myoracle (_ bv1 8)) false)
assumption: (= (myoracle (_ bv8 8)) false)
Fail: got 0 new constraints
SYNTH iteration 4
Using  2 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |myoracle$ce| ((_ BitVec 8) )Bool)
; set_to true
(assert (myoracle$ce |my_constant_inst0_result_0| ))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))

; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 4
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (_ bv9 8) ))

; set_to true (equal)
(define-fun |H1| () Bool (myoracle (_ bv8 8) ))

; set_to true (equal)
(define-fun |H2| () Bool (myoracle (_ bv1 8) ))

; set_to true (equal)
(define-fun |H3| () Bool (myoracle (_ bv0 8) ))

; set_to false
(assert (not (=> (and (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv8 8) ) false)) (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (_ bv9 8) )))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 8
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 1
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 9
Response stream false 

oracle response false
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (myoracle (my_constant (_ bv0 8)))
getting assumptions 
assumption: (= (myoracle (_ bv0 8)) false)
assumption: (= (myoracle (_ bv1 8)) false)
assumption: (= (myoracle (_ bv8 8)) false)
assumption: (= (myoracle (_ bv9 8)) false)
Fail: got 0 new constraints
SYNTH iteration 5
Using  2 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |myoracle$ce| ((_ BitVec 8) )Bool)
; set_to true
(assert (myoracle$ce |my_constant_inst0_result_0| ))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv9 8) ) false))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))

; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 4
VERIFY iteration 5
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (_ bv4 8) ))

; set_to true (equal)
(define-fun |H1| () Bool (myoracle (_ bv9 8) ))

; set_to true (equal)
(define-fun |H2| () Bool (myoracle (_ bv8 8) ))

; set_to true (equal)
(define-fun |H3| () Bool (myoracle (_ bv1 8) ))

; set_to true (equal)
(define-fun |H4| () Bool (myoracle (_ bv0 8) ))

; set_to false
(assert (not (=> (and (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv9 8) ) false)) (and (bvult (_ bv4 8) (_ bv10 8)) (myoracle (_ bv4 8) )))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 8
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 1
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 9
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 4
Response stream false 

oracle response false
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (myoracle (my_constant (_ bv0 8)))
getting assumptions 
assumption: (= (myoracle (_ bv0 8)) false)
assumption: (= (myoracle (_ bv1 8)) false)
assumption: (= (myoracle (_ bv4 8)) false)
assumption: (= (myoracle (_ bv8 8)) false)
assumption: (= (myoracle (_ bv9 8)) false)
Fail: got 0 new constraints
SYNTH iteration 6
Using  2 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |myoracle$ce| ((_ BitVec 8) )Bool)
; set_to true
(assert (myoracle$ce |my_constant_inst0_result_0| ))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv9 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv4 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv9 8) ) false))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))

; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 2
VERIFY iteration 6
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (_ bv2 8) ))

; set_to true (equal)
(define-fun |H1| () Bool (myoracle (_ bv9 8) ))

; set_to true (equal)
(define-fun |H2| () Bool (myoracle (_ bv8 8) ))

; set_to true (equal)
(define-fun |H3| () Bool (myoracle (_ bv4 8) ))

; set_to true (equal)
(define-fun |H4| () Bool (myoracle (_ bv1 8) ))

; set_to true (equal)
(define-fun |H5| () Bool (myoracle (_ bv0 8) ))

; set_to false
(assert (not (=> (and (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv9 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv4 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv9 8) ) false)) (and (bvult (_ bv2 8) (_ bv10 8)) (myoracle (_ bv2 8) )))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 2
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 9
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 1
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 4
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 8
Response stream false 

oracle response false
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (myoracle (my_constant (_ bv0 8)))
getting assumptions 
assumption: (= (myoracle (_ bv0 8)) false)
assumption: (= (myoracle (_ bv1 8)) false)
assumption: (= (myoracle (_ bv2 8)) false)
assumption: (= (myoracle (_ bv4 8)) false)
assumption: (= (myoracle (_ bv8 8)) false)
assumption: (= (myoracle (_ bv9 8)) false)
Fail: got 0 new constraints
SYNTH iteration 7
Using  2 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |myoracle$ce| ((_ BitVec 8) )Bool)
; set_to true
(assert (myoracle$ce |my_constant_inst0_result_0| ))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv9 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv4 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv9 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv2 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv4 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv9 8) ) false))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))

; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 6
VERIFY iteration 7
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (_ bv6 8) ))

; set_to true (equal)
(define-fun |H1| () Bool (myoracle (_ bv9 8) ))

; set_to true (equal)
(define-fun |H2| () Bool (myoracle (_ bv8 8) ))

; set_to true (equal)
(define-fun |H3| () Bool (myoracle (_ bv4 8) ))

; set_to true (equal)
(define-fun |H4| () Bool (myoracle (_ bv2 8) ))

; set_to true (equal)
(define-fun |H5| () Bool (myoracle (_ bv1 8) ))

; set_to true (equal)
(define-fun |H6| () Bool (myoracle (_ bv0 8) ))

; set_to false
(assert (not (=> (and (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv9 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv4 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv9 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv2 8) ) false) (= (myoracle (_ bv4 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv9 8) ) false)) (and (bvult (_ bv6 8) (_ bv10 8)) (myoracle (_ bv6 8) )))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 1
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 9
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 2
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 8
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 4
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 6
Response stream false 

oracle response false
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (myoracle (my_constant (_ bv0 8)))
getting assumptions 
assumption: (= (myoracle (_ bv0 8)) false)
assumption: (= (myoracle (_ bv1 8)) false)
assumption: (= (myoracle (_ bv2 8)) false)
assumption: (= (myoracle (_ bv4 8)) false)
assumption: (= (myoracle (_ bv6 8)) false)
assumption: (= (myoracle (_ bv8 8)) false)
assumption: (= (myoracle (_ bv9 8)) false)
Fail: got 0 new constraints
SYNTH iteration 8
Using  2 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |myoracle$ce| ((_ BitVec 8) )Bool)
; set_to true
(assert (myoracle$ce |my_constant_inst0_result_0| ))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv9 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv4 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv9 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv2 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv4 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv9 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv0 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv1 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv2 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv4 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv6 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv8 8) ) false))

; set_to true
(assert (= (myoracle$ce (_ bv9 8) ) false))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))

; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 5
VERIFY iteration 8
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (_ bv5 8) ))

; set_to true (equal)
(define-fun |H1| () Bool (myoracle (_ bv9 8) ))

; set_to true (equal)
(define-fun |H2| () Bool (myoracle (_ bv8 8) ))

; set_to true (equal)
(define-fun |H3| () Bool (myoracle (_ bv6 8) ))

; set_to true (equal)
(define-fun |H4| () Bool (myoracle (_ bv4 8) ))

; set_to true (equal)
(define-fun |H5| () Bool (myoracle (_ bv2 8) ))

; set_to true (equal)
(define-fun |H6| () Bool (myoracle (_ bv1 8) ))

; set_to true (equal)
(define-fun |H7| () Bool (myoracle (_ bv0 8) ))

; set_to false
(assert (not (=> (and (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv9 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv4 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv9 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv2 8) ) false) (= (myoracle (_ bv4 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv9 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv2 8) ) false) (= (myoracle (_ bv4 8) ) false) (= (myoracle (_ bv6 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv9 8) ) false)) (and (bvult (_ bv5 8) (_ bv10 8)) (myoracle (_ bv5 8) )))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 6
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 8
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 4
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 1
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 2
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 9
Response stream false 

oracle response false
Running oracle (verification), binary name constant_oracle constant_oracle 5
Response stream true

oracle response true
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (_ bv5 8) ))

; set_to true (equal)
(define-fun |H1| () Bool (myoracle (_ bv9 8) ))

; set_to true (equal)
(define-fun |H2| () Bool (myoracle (_ bv8 8) ))

; set_to true (equal)
(define-fun |H3| () Bool (myoracle (_ bv6 8) ))

; set_to true (equal)
(define-fun |H4| () Bool (myoracle (_ bv4 8) ))

; set_to true (equal)
(define-fun |H5| () Bool (myoracle (_ bv2 8) ))

; set_to true (equal)
(define-fun |H6| () Bool (myoracle (_ bv1 8) ))

; set_to true (equal)
(define-fun |H7| () Bool (myoracle (_ bv0 8) ))

; set_to false
(assert (not (=> (and (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv9 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv4 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv9 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv2 8) ) false) (= (myoracle (_ bv4 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv9 8) ) false) (= (myoracle (_ bv0 8) ) false) (= (myoracle (_ bv1 8) ) false) (= (myoracle (_ bv2 8) ) false) (= (myoracle (_ bv4 8) ) false) (= (myoracle (_ bv6 8) ) false) (= (myoracle (_ bv8 8) ) false) (= (myoracle (_ bv9 8) ) false)) (and (bvult (_ bv5 8) (_ bv10 8)) (myoracle (_ bv5 8) )))))

; set_to true
(assert (=> (= (_ bv5 8) (_ bv5 8)) (= |H0| true)))
Verification passed
SOLUTION:
my_constant  =  (_ bv5 8)
