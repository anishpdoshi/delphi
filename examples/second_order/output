checking if myoracle, with type mathematical_function
  0: 
    0: unsignedbv
        * width: 8
  1: boolis second order
Arg unsignedbv
  * width: 8
Start OGIS
SYNTH iteration 1
Using  0 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)
Got solution VERIFY iteration 1
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (my_constant (_ bv0 8) ) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 1 new constraints
SYNTH iteration 2
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 2
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 3
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 3
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 4
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 4
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 5
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 5
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 6
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 6
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 7
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 7
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 8
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 8
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 9
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 9
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 10
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 10
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 11
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 11
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 12
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 12
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 13
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 13
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 14
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 14
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 15
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 15
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 16
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 16
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 17
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 17
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 18
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 18
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 19
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 19
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 20
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 20
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 21
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 21
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 22
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 22
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 23
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 23
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 24
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 24
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 25
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 25
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 26
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 26
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 27
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 27
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 28
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 28
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 29
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 29
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 30
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 30
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 31
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 31
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 32
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 32
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 33
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 33
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 34
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 34
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 35
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 35
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 36
Using  1 synthesis constraints
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |my_constant_inst0_result_0| () (_ BitVec 8))
; set_to true
(assert (bvult |my_constant_inst0_result_0| (_ bv10 8)))

; find_symbols
(declare-fun |my_constant_0_p0sel| () Bool)
; find_symbols
(declare-fun |my_constant_0_cval| () (_ BitVec 8))
; set_to true
(assert (= |my_constant_inst0_result_0| (ite |my_constant_0_p0sel| (_ bv0 8) |my_constant_0_cval|)))
Got solution my_constant -> 9
VERIFY iteration 36
; SMT 2
; Generated for Z3
(set-info :source "generated by fastsynth")
(set-option :produce-models true)

; find_symbols
(declare-fun |myoracle| ((_ BitVec 8) )Bool)
; find_symbols
(declare-fun |my_constant| ((_ BitVec 8) )(_ BitVec 8))
; set_to true (equal)
(define-fun |H0| () Bool (myoracle (my_constant (_ bv0 8) ) ))

; set_to true (equal)
(define-fun |H1| () (_ BitVec 8) (my_constant (_ bv0 8) ))

; set_to false
(assert (not (and (bvult (_ bv9 8) (_ bv10 8)) (myoracle (my_constant (_ bv0 8) ) ))))
Running oracle (verification), binary name constant_oracle constant_oracle 0
Response stream false 

oracle response false
Generating constraint from (< (my_constant (_ bv0 8)) (_ bv10 8))
Replaced constants (< (my_constant (_ bv0 8)) (_ bv10 8))
Synthesis constraint (< (my_constant (_ bv0 8)) (_ bv10 8))
Generating constraint from (myoracle (my_constant (_ bv0 8)))
Replaced constants (myoracle (my_constant (_ bv0 8)))
Oracle id myoracle
the second order oracles are Arg function_application
  * type: unsignedbv
      * width: 8
  0: symbol
      * type: mathematical_function
          0: 
            0: unsignedbv
                * width: 8
          1: unsignedbv
              * width: 8
      * identifier: my_constant
  1: tuple
      * type: 
      0: constant
          * type: unsignedbv
              * width: 8
          * value: 0
built counterexample constraint
Call oracles 

oracles called

Fail: got 0 new constraints
SYNTH iteration 37
Using  1 synthesis constraints
