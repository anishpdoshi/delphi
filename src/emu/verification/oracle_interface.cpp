#include "oracle_interface.h"
#include <solvers/smt2/smt2_dec.h>
#include <langapi/language_util.h>




void oracle_interfacet::add_problem(const problemt &problem, const solutiont &solution, decision_proceduret &solver)
{
  verify_encodingt::check_function_bodies(solution.functions);
  verify_encoding.functions = solution.functions;
  verify_encoding.free_variables = problem.free_variables;
  
  verify_encoding.clear();
  const exprt encoded_assumptions = verify_encoding(conjunction(problem.assumptions));
  solver.set_to_true(encoded_assumptions);
  const exprt encoded_constraints = verify_encoding(conjunction(problem.constraints));
  solver.set_to_false(encoded_constraints);
}

void oracle_interfacet::call_oracles(problemt &problem)
{
  // pick some strategy to call them? or just call them all

}

oracle_interfacet::resultt oracle_interfacet::operator()(problemt &problem,
                                                         const solutiont &solution)
{
  // get solver
  smt2_dect solver(
      ns, "fastsynth", "generated by fastsynth",
      "LIA", smt2_dect::solvert::Z3, message_handler);

  return this->operator()(problem, solution, solver);
}

oracle_interfacet::resultt oracle_interfacet::operator()(problemt &problem,
    const solutiont &solution,
    decision_proceduret &solver)
  {
    // do something with the model? 
    add_problem(problem, solution, solver);
    decision_proceduret::resultt result = solver();

    switch(result)
    {
      case decision_proceduret::resultt::D_SATISFIABLE:
      {
        counterexample=
        verify_encoding.get_counterexample(solver);
        call_oracles(problem);
        return oracle_interfacet::resultt::FAIL; 
      }
      case decision_proceduret::resultt::D_ERROR:
      {
        call_oracles(problem);
        return oracle_interfacet::resultt::FAIL;
      } 
      case decision_proceduret::resultt::D_UNSATISFIABLE:
      {
        counterexample.clear();
      return oracle_interfacet::resultt::PASS;
      }
    }
  }

counterexamplet oracle_interfacet::get_counterexample()
{
  return counterexample;
}  